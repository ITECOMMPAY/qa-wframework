    </div>

            <div class="right-panel">
                <video id="video-insert" controls>
                    <source id = "video-insert-source" src="./screenshots/video.mp4" type="video/mp4">
                    Your browser does not support the video tag.
                </video>
                <img id="image-insert" src="./screenshots/00000000.png" alt="Page Screenshot">
            </div>

            </div>

            <script>

                const logVideoBlock = document.getElementById("video-insert");
                const logVideoSource = document.getElementById("video-insert-source");
                const logScreenshotBlock = document.getElementById("image-insert");

                const leftPanel = document.getElementsByClassName('left-panel')[0];
                const rightPanel = document.getElementsByClassName('right-panel')[0];

                class LogNode {
                    constructor(level, div) {
                        this.parent = null;
                        this.children = [];

                        this.level = level;
                        this.div = null;
                        this.shotNumber = null;
                        this.shotFilename = null;

                        if (div instanceof Element) {
                            this.div = div;
                            div.logNode = this;
                            this.parseShotNumber();
                        }
                    }

                    cantHaveChildren() {
                        return false;
                    }

                    parseShotNumber() {
                        if (!this.div.hasAttribute("data-shot")) {
                            return;
                        }

                        let shotName = this.div.getAttribute("data-shot");

                        let shotNumber = parseInt(shotName, 10);

                        if (Number.isNaN(shotNumber)) {
                            return;
                        }

                        this.div.addEventListener("mouseover", onHoverSeekVideoCallback);

                        this.shotNumber = shotNumber;
                        this.shotFilename = `./screenshots/${shotName}.png`;
                    }

                    static fromDiv(div) {
                        let classList = div.classList;

                        if (classList[0] === undefined) {
                            return null;
                        }

                        if (classList[0] === 'debug') {
                            return new LogDebug(div);
                        }

                        if (classList[0] === 'info') {
                            return new LogInfo(div);
                        }

                        if (classList[0] === 'notice') {
                            return new LogNotice(div);
                        }

                        if (classList[0] === 'warning') {
                            return new LogWarning(div);
                        }

                        if (classList[0] === 'error') {
                            return new LogError(div);
                        }

                        if (classList[0] === 'critical') {
                            return new LogCritical(div);
                        }

                        if (classList[0] === 'alert') {
                            return new LogAlert(div);
                        }

                        if (classList[0] === 'emergency') {
                            return new LogEmergency(div);
                        }

                        return null;
                    }

                    addChild(node) {
                        this.children.push(node);
                        node.parent = this;
                    }

                    registerNodeReturnIt(node) {
                        if (node.level < this.level) {
                            this.addChild(node);
                            return node;
                        }

                        if (this.parent === null) {
                            return null;
                        }

                        return this.parent.registerNodeReturnIt(node);
                    }

                    *traverseDepthFirst() {
                        const buffer = [];

                        buffer.push(... this.children);

                        while (buffer.length !== 0) {
                            var node = buffer.shift();
                            yield node;
                            buffer.unshift(... node.children);
                        }
                    }

                    *traverseToRoot() {
                        var parent = this.parent;

                        while (parent !== null) {
                            yield parent;
                            parent = parent.parent;
                        }
                    }

                    addAccordion() {
                        this.div.classList.add('accordion');

                        this.div.addEventListener('click', function () {
                                if (this.classList.toggle('active')) {
                                    this.logNode.expand();
                                } else {
                                    this.logNode.collapse();
                                }
                            });
                    }

                    removeAccordion() {
                        this.div.classList.remove('accordion');
                    }

                    expand() {
                        this.show();

                        this.div.classList.add('active');

                        for (const child of this.children) {
                            child.show();
                        }
                    }

                    collapse() {
                        this.div.classList.remove('active');

                        for (const child of this.traverseDepthFirst()) {
                            child.hide();
                        }
                    }

                    expandParents() {
                        for (const parent of this.traverseToRoot()) {
                            if (parent.div === null) {
                                continue;
                            }

                            parent.expand();
                        }
                    }

                    show() {
                        this.div.style.display = 'block';
                    }

                    hide() {
                        this.collapse();

                        this.div.style.display = 'none';
                    }

                    markAsCurrentVideoFrame() {
                        this.div.classList.add('current-frame');
                    }

                    unmarkAsCurrentVideoFrame() {
                        this.div.classList.remove('current-frame');
                    }
                }

                class LogDebug extends LogNode {
                    constructor(div) {
                        super(100, div);
                    }
                }

                class LogInfo extends LogNode {
                    constructor(div) {
                        super(200, div);
                    }
                }

                class LogNotice extends LogNode {
                    constructor(div) {
                        super(250, div);
                    }
                }

                class LogWarning extends LogNode {
                    constructor(div) {
                        super(300, div);
                    }

                    cantHaveChildren() {
                        return true;
                    }
                }

                class LogError extends LogNode {
                    constructor(div) {
                        super(400, div);
                    }

                    cantHaveChildren() {
                        return true;
                    }
                }

                class LogCritical extends LogNode {
                    constructor(div) {
                        super(500, div);
                    }

                    cantHaveChildren() {
                        return true;
                    }
                }

                class LogAlert extends LogNode {
                    constructor(div) {
                        super(550, div);
                    }

                    cantHaveChildren() {
                        return true;
                    }
                }

                class LogEmergency extends LogNode {
                    constructor(div) {
                        super(600, div);
                    }
                }

                class LogRoot extends LogNode {
                    constructor() {
                        super(1000, null);
                    }
                }

                function initLogTree() {
                    const leftPanel = document.getElementsByClassName('left-panel')[0];

                    const root = new LogRoot();

                    var currentNode = root;

                    for (const child of leftPanel.children) {
                        var logNode = LogNode.fromDiv(child);

                        if (logNode === null) {
                            continue;
                        }

                        if (logNode.cantHaveChildren()) {
                            root.addChild(logNode);
                            continue;
                        }

                        currentNode = currentNode.registerNodeReturnIt(logNode) ?? currentNode;
                    }

                    return root;
                }

                const logTree = initLogTree(); // Parse the log into a tree

                function addAccordions(logTree) {
                    for (const node of logTree.traverseDepthFirst()) {
                        if (node.children.length === 0) {
                            node.removeAccordion();
                            continue;
                        }

                        node.addAccordion();
                    }
                }

                addAccordions(logTree); // After the log tree constructed add styles for accordions to nodes that have children

                function checkResult() {
                    const errors = document.getElementsByClassName("error");

                    if (errors.length > 0) {
                        return;
                    }

                    const title = document.querySelectorAll('.title')[0];

                    title.style.backgroundColor = "#1de9b6";
                }

                checkResult(); // Mark test as passed if no errors were found

                function hideRightPanel() {
                    leftPanel.style.width = "100%";

                    rightPanel.style.width = "0%";
                }

                const shotNumberToLogNode = new Map();

                function checkScreenshots() {
                    for (const node of logTree.traverseDepthFirst()) {
                        if (node.shotNumber === null) {
                            continue;
                        }

                        shotNumberToLogNode.set(node.shotNumber, node);
                    }

                    if (shotNumberToLogNode.size === 0) {
                        hideRightPanel();
                    }
                }

                checkScreenshots(); // Hide right panel if no screenshots were found

                function onVideoErrorCallback() {
                    hideVideoBlock();
                }

                function hideVideoBlock() {
                    logVideoBlock.style.display = "none";
                    logScreenshotBlock.style.display = "inline-block";
                }

                logVideoSource.onerror = function () { onVideoErrorCallback() }; // Hide video on error

                //Next we add scrolling the log to the current video frame and vice-versa

                let previousFrameNode = null;

                logVideoBlock.ontimeupdate = function () { onTimeUpdateCallback() };

                function addSeekMark(logNode) {
                    if (previousFrameNode !== null) {
                        previousFrameNode.unmarkAsCurrentVideoFrame();
                    }

                    logNode.markAsCurrentVideoFrame();
                    previousFrameNode = logNode;
                }

                function onTimeUpdateCallback() {
                    const shotNumber = Math.floor(logVideoBlock.currentTime);

                    if (shotNumber === previousFrameNode.shotNumber) {
                        return;
                    }

                    if (!shotNumberToLogNode.has(shotNumber)) {
                        return;
                    }

                    const logNode = shotNumberToLogNode.get(shotNumber);

                    addSeekMark(logNode);

                    logNode.expandParents();

                    logNode.div.scrollIntoView(true);
                }

                function onHoverSeekVideoCallback(event) {
                    const element = event.currentTarget;

                    if (element.logNode === undefined) {
                        return;
                    }

                    const logNode = element.logNode;

                    if (logNode.shotNumber === null || logNode.shotFilename === null) {
                        return;
                    }

                    addSeekMark(logNode);

                    logVideoBlock.currentTime = logNode.shotNumber;
                    logScreenshotBlock.src = logNode.shotFilename;
                }
            </script>

        </body>

</html>
